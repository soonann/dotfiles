---
- name: installing dependencies and make symlinks
  hosts: localhost
  connection: local

  # set where you've cloned the dotfiles to
  vars_prompt:
    - name: dotfiles_path
      prompt: Enter the full path of the dotfiles
      default: /home/soonann/dotfiles
      private: no
  
  tasks:

  # ensure $HOME/.local/bin dir exists
  - name: check if the $HOME/.local/bin dir exists
    stat:
      path: $HOME/.local/bin
    register: home_local_bin

  - name: create $HOME/.local/bin
    file:
      path: $HOME/.local/bin
      state: directory
    when: not home_local_bin.stat.exists

  # enable all the non-free repositories: 
  # search for software and updates and enable all the repositories
  # install system drivers
  - name: install drivers
    become: true
    ansible.builtin.apt:
      pkg:
      - nvidia-driver

  # install generic dev tools
  - name: install dev tools 
    become: true
    ansible.builtin.apt:
      pkg:
      - tmux
      - alacritty
      - git

      - fzf
      - ripgrep
      - fd-find
      - htop

      - curl
      - wget
      - zip
      - unzip
      - neofetch
      - dconf-editor

  # install neovim manually - latest version
  - name: check if /opt/nvim-linux64 exists
    stat:
      path: /opt/nvim-linux64
    register: opt_nvim

  # https://github.com/neovim/neovim/releases/download/stable/nvim-linux64.tar.gz
  - name: download the latest stable release and untar to /opt
    become: true
    shell: |
      # download the latest stable release to /tmp
      wget https://github.com/neovim/neovim/releases/download/stable/nvim-linux64.tar.gz -qP /tmp/
      # untar it to /opt
      tar -xf /tmp/nvim-linux64.tar.gz -C /opt/
    when: not opt_nvim.stat.exists

  # install tmux package manager 
  - name: check if tpm already exists
    stat:
      path: $HOME/.tmux/plugins/tpm
    register: home_tpm

  - name: install tpm to $HOME/.tmux/plugins/tpm dir
    shell: git clone https://github.com/tmux-plugins/tpm $HOME/.tmux/plugins/tpm
    when: not home_tpm.stat.exists

  - name: setup git config
    shell: |
      git config --global user.name soonann
      git config --global user.name sudo@soonann.dev
      git config --global core.editor vim

  # install python/python tools
  - name: install python
    become: true
    ansible.builtin.apt:
      pkg:
      - python3-pip
      - python3-venv

  # install c/c++ tools 
  - name: install c/c++ tools
    become: true
    ansible.builtin.apt:
      pkg: 
      - gcc 
      - g++
      - cmake

  # install rancher - https://docs.rancherdesktop.io/getting-started/installation/#linux
  - name: install rancher dependencies
    become: true
    ansible.builtin.apt:
      pkg: 
      - pass 
      - gnupg2

  - name: check if .rd dir exists
    stat:
      path: $HOME/.rd
    register: home_rd

  - name: install rancher desktop if it does not exist 
    shell: |
      curl -s https://download.opensuse.org/repositories/isv:/Rancher:/stable/deb/Release.key | gpg --dearmor | sudo dd status=none of=/usr/share/keyrings/isv-rancher-stable-archive-keyring.gpg
      echo 'deb [signed-by=/usr/share/keyrings/isv-rancher-stable-archive-keyring.gpg] https://download.opensuse.org/repositories/isv:/Rancher:/stable/deb/ ./' | sudo dd status=none of=/etc/apt/sources.list.d/isv-rancher-stable.list
      sudo apt update
      sudo apt install rancher-desktop
    when: not home_rd.stat.exists

  # install docker
  - name: check if docker exists
    stat:
      path: /usr/bin/docker  
    register: bin_docker

  # https://docs.docker.com/engine/install/debian/#set-up-the-repository
  # https://docs.docker.com/desktop/install/debian/
  - name: setup docker repository
    become: true
    shell: |
      sudo apt update
      sudo apt install ca-certificates curl gnupg
      sudo install -m 0755 -d /etc/apt/keyrings
      curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
      sudo chmod a+r /etc/apt/keyrings/docker.gpg
      echo \
      "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian \
      "$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" | \
      sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
      sudo apt install docker-ce-cli docker-buildx-plugin docker-compose-plugin
    when: not bin_docker.stat.exists

  # install kubectl
  - name: check if kubectl exists
    stat:
      path: $HOME/.local/bin/kubectl
    register: local_bin_kubectl

  - name: install kubectl
    shell: |
      curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl" 
      sudo install -o root -g root -m 0755 kubectl $HOME/.local/bin/kubectl
      rm ./kubectl
    when: not local_bin_kubectl.stat.exists

  # link bashrc
  - name: Create symlink for bashrc
    ansible.builtin.file:
      src: "{{ dotfiles_path }}/.rc.d"
      dest: $HOME/.rc.d
      state: link

  # link tmux dotfiles
  - name: Create symlink for tmux
    ansible.builtin.file:
      src: "{{ dotfiles_path }}/tmux/.tmux.conf"
      dest: $HOME/.tmux.conf
      state: link

  # link tmux-sessionizer
  - name: Create symlink for tmux-sessionizer
    ansible.builtin.file:
      src: "{{ dotfiles_path }}/tmux/tmux-sessionizer"
      dest: $HOME/.local/bin/tmux-sessionizer
      state: link

  # link nvim dotfiles
  - name: Create symlink for nvim
    ansible.builtin.file:
      src: "{{ dotfiles_path }}/nvim"
      dest: $HOME/.config/nvim
      state: link

  # link alacritty dotfiles
  - name: Create symlink for alacritty
    ansible.builtin.file:
      src: "{{ dotfiles_path }}/alacritty"
      dest: $HOME/.config/alacritty
      state: link

  # setup gnome window manager bindings
  - name: Setup gsettings
    shell: "{{ dotfiles_path }}/wm/gnome/gsettings-bindings.sh"

  # setup fonts
  - name: Check if fonts already exists
    stat:
      path: $HOME/.local/share/fonts
    register: local_share_fonts

  - name: Download Hack Nerd Font
    shell: |
      wget -O {{ dotfiles_path }}/fonts/Hack.tar.xz https://github.com/ryanoasis/nerd-fonts/releases/download/v3.0.2/Hack.tar.xz
      tar -xvf {{ dotfiles_path }}/fonts/Hack.tar.xz -C {{ dotfiles_path }}/fonts

  - name: Create symlink for fonts
    ansible.builtin.file:
      src: "{{ dotfiles_path }}/fonts"
      dest: $HOME/.local/share/fonts
      state: link
    when: not local_share_fonts.stat.exists

  - name: Rebuild font cache
    shell: fc-cache -f -v 
    when: not local_share_fonts.stat.exists
